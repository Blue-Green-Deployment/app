version: 0.2

env:
  parameter-store:
    ##DOCKER_REGISTRY_USERNAME: /cicd/docker-credentials/username
    #DOCKER_REGISTRY_PASSWORD: /cicd/docker-credentials/password
    #DOCKER_REGISTRY_URL: /cicd/docker-registry/url
    SONAR_TOKEN: /cicd/sonar/sonar-token

phases:
  install:
    runtime-versions:
      python: 3.11
      java: corretto17

  pre_build:
    commands:
      - echo "Installing dependencies..."
      - echo "Performing Trivy file scan before building the image..."
      # - wget https://github.com/aquasecurity/trivy/releases/download/v0.19.2/trivy_0.19.2_Linux-64bit.tar.gz
      # - tar zxvf trivy_0.19.2_Linux-64bit.tar.gz
      # - export PATH=$PATH:$PWD
      # - trivy filesystem --exit-code 0 --no-progress . >> trivyfilescan.txt
      # - echo "Downloading and installing OWASP Dependency-Check..."
      # - wget https://github.com/jeremylong/DependencyCheck/releases/download/v7.0.2/dependency-check-7.0.2-release.zip
      # - unzip dependency-check-7.0.2-release.zip
      # - export SONAR_SCANNER_VERSION=4.7.0.2747
      # - export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
      # - curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
      # - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
      # - export PATH=$SONAR_SCANNER_HOME/bin:$PATH
      # - export SONAR_SCANNER_OPTS="-server"

  build:
    commands:
      - echo "Running tests..."
      - echo "Building Docker image..."
      - echo "Logging into ECR and building image..."
      - aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS --password-stdin "$(echo $ECR_REPO | cut -d'/' -f1)"
      - docker build -t "$ECR_REPO:latest" .
      - docker push "$ECR_REPO:latest"

  post_build:
    commands:
      - |
        set -eu
        echo "Resolving executionRoleArn for taskdef.json..."
        export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        : "${PROJECT_NAME:=swiggy-clone}"
        echo "Using account: ${ACCOUNT_ID} and project: ${PROJECT_NAME}"
        ACCOUNT_ID="${ACCOUNT_ID}" PROJECT_NAME="${PROJECT_NAME}" python - <<'PY'
        import json, os
        account_id = os.environ['ACCOUNT_ID']
        project    = os.environ.get('PROJECT_NAME', 'swiggy-clone')
        ecr_repo   = os.environ.get('ECR_REPO')
        path = 'taskdef.json'
        with open(path) as f:
            data = json.load(f)
        data['executionRoleArn'] = f"arn:aws:iam::{account_id}:role/{project}-ecsTaskExecutionRole"
        if ecr_repo:
            # Ensure image points to ECR repo we just built
            try:
                data['containerDefinitions'][0]['image'] = f"{ecr_repo}:latest"
            except Exception:
                pass
        with open(path, 'w') as f:
            json.dump(data, f, indent=2)
        print('Updated executionRoleArn to', data['executionRoleArn'])
        if ecr_repo:
            print('Updated image to', f"{ecr_repo}:latest")
        PY
      # Use a single YAML string for the multi-line CLI command
      #- |
      #  aws ses send-email \
      #    --from "madithati123@gmail.com" \
      #    --destination "ToAddresses=madithati123@gmail.com" \
      #    --message "Subject={Data=CodeBuild Status: ${CODEBUILD_BUILD_ID}},Body={Text={Data=Build status: ${CODEBUILD_BUILD_STATUS}}}" \
      #    --region "us-east-1"
      # Si prefieres tu sintaxis anterior, tambiÃ©n sirve, pero siempre como bloque literal:
      # - |
      #   aws ses send-email \
      #     --from "madithati123@gmail.com" \
      #     --to "madithati123@gmail.com" \
      #     --subject "CodeBuild Status: $CODEBUILD_BUILD_ID" \
      #     --text "Build status: $CODEBUILD_BUILD_STATUS" \
      #     --region "us-east-1"

artifacts:
  files:
    - appspec.yaml
    - taskdef.json
